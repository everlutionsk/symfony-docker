#!/usr/bin/env bash

# directory where this script is located
cd $(dirname "$0")

if [ ! -f ./infrastructure/env/symfony.env ]; then
    cp ./infrastructure/env/symfony.env.dist ./infrastructure/env/symfony.env
    echo -e "\e[01;31mThe ./infrastructure/env/symfony.env file has been created. Please change it according to README.md before continuing.\e[0m"
    exit 1
fi

if [ ! -f ./infrastructure/env/docker.env ]; then
    cp ./infrastructure/env/docker.env.dist ./infrastructure/env/docker.env
    echo -e "\e[01;31mThe ./infrastructure/env/docker.env file has been created. Please change it according to README.md before continuing.\e[0m"
    exit 1
fi

# source env files
set -a
source ./infrastructure/env/docker.env
source ./infrastructure/env/symfony.env
set +a

echo -e "\e[96m ENV=$DOCKER_INFRASTRUCTURE_ENV; DOMAIN=$NGINX_DOMAIN \e[0m"

if [ "$DOCKER_INFRASTRUCTURE_ENV" == "prod" ]; then
    COMPOSE="docker-compose -p ${PWD##*/} -f infrastructure/docker-compose.yml"
else
    COMPOSE="docker-compose -p ${PWD##*/} -f infrastructure/docker-compose.yml -f infrastructure/docker-compose-dev.yml"
fi

print_help () {
echo "Usage: $0 [command] [argument, ...]

init - initializes the project from scratch
up - brings containers up
stop - stops containers
down - stops and removes containers
restart - stops, rebuilds and starts specified containers eg. '$0 restart nginx fpm' will restart nginx and fpm
bin/console - runs Symfony's bin/console within cli container
composer - runs composer within cli container
npm - runs npm within node container
encore - runs encore within cli container (you need to install encore and set-up your project for proper use with Symfony's webpack first)
cs - checks your src/ and tests/ with php-cs-fixer and phpmd utilities
test - run tests with phpunit
permissions - fixes permissions in var/ folder
mysql - connects to the database within db container
mysqldump - dumps the database to ./infrastructure/volumes/sqldump
compose - wrapper for docker-compose"
exit 1
}

if [ $# -lt 1 ]; then
    print_help
fi

case "$1" in
    init)
        sudo ./infrastructure/bin/init $NGINX_DOMAIN
        ;;
    up)
        $COMPOSE stop && $COMPOSE build && $COMPOSE up -d
        ;;
    stop)
        $COMPOSE stop
        ;;
    down)
        $COMPOSE down
        ;;
    restart)
        shift 1
        $COMPOSE stop "$@" && $COMPOSE build "$@" && $COMPOSE up -d "$@"
        ;;
    bin/console)
        shift 1
        $COMPOSE exec cli bin/console "$@"
        ;;
    composer)
        shift 1
        $COMPOSE exec cli composer "$@"
        ;;
    npm)
        shift 1
        $COMPOSE exec node npm "$@"
        ;;
    encore)
        shift 1
        $COMPOSE exec node ./node_modules/.bin/encore "$@"
        ;;
    cs)
        $COMPOSE exec test bash -c "php-cs-fixer fix src/ --allow-risky yes --diff --verbose --using-cache=no --rules=@Symfony,declare_strict_types,-simplified_null_return,-phpdoc_align && \
                                    php-cs-fixer fix tests/ --allow-risky yes --diff --verbose --using-cache=no --rules=@Symfony,declare_strict_types,-simplified_null_return,-phpdoc_align && \
                                    phpmd src/ text cleancode, codesize, controversial, design, naming, unusedcode --suffixes php && \
                                    phpmd tests/ text cleancode, codesize, controversial, design, naming, unusedcode --suffixes php"
        ;;
    test)
        $COMPOSE exec test phpunit --log-junit phpunit/junit.xml
        ;;
    permissions)
        ./infrastructure/bin/fix-permissions
        ;;
    mysql)
        shift 1
        $COMPOSE exec db mysql -u$DB_USER -p$DB_USER $DB_NAME
        ;;
    mysqldump)
        FILENAME=/sqldump/$(date +%d-%m-%Y_%H-%M)_$NGINX_DOMAIN.sql
        $COMPOSE exec db mysqldump -u$DB_USER -p$DB_USER $DB_NAME > $FILENAME
        echo "You can find your dump at ./infrastructure/volumes$FILENAME"
        ;;
    compose)
        shift 1
        $COMPOSE "$@"
        ;;
    *)
        print_help
esac
