#!/usr/bin/env bash

# directory where this script is located
cd $(dirname "$0")

if [ ! -f ./infrastructure/env/symfony.env ]; then
    echo -e "\e[01;31mYou need to create ./infrastructure/env/symfony.env file. Check README.md for more information.\e[0m"
    exit 1
fi

if [ -f "./infrastructure/env/docker.env" ]; then
    source ./infrastructure/env/docker.env
fi

# Set environment variables for compose
export APP_ENV=${SYMFONY_APP_ENV:-dev}
export APP_PORT=${SYMFONY_APP_PORT:-80}
export ES_PORT=${SYMFONY_ES_PORT:-9200}
export APP_DOMAIN=${SYMFONY_APP_DOMAIN:-dev.symfony}
export BASE_AUTH_USER=${SYMFONY_BASE_AUTH_USER:-user}
export BASE_AUTH_PASSWORD=${SYMFONY_BASE_AUTH_PASSWORD:-password}

echo -e "\e[96m ENV=$APP_ENV; DOMAIN=$APP_DOMAIN \e[0m"

if [ "$APP_ENV" == "prod" ]; then
    COMPOSE="docker-compose -p ${PWD##*/} -f infrastructure/docker-compose.yml"
else
    COMPOSE="docker-compose -p ${PWD##*/} -f infrastructure/docker-compose.yml -f infrastructure/docker-compose-dev.yml"
    export DB_PORT=${SYMFONY_DB_PORT:-3306}
fi

if [ $# -gt 0 ]; then
    #
    # init
    #
    if [ "$1" == "init" ]; then
        shift 1
        sudo ./infrastructure/bin/init "$@"    #
    # up
    #
    elif [ "$1" == "up" ]; then
        $COMPOSE stop && $COMPOSE build && $COMPOSE up -d
    #
    # stop
    #
    elif [ "$1" == "stop" ]; then
        $COMPOSE stop
    #
    # down
    #
    elif [ "$1" == "down" ]; then
        $COMPOSE down
    #
    # bin/console
    #
    elif [ "$1" == "bin/console" ]; then
        shift 1
        $COMPOSE exec cli bin/console "$@"
    #
    # composer
    #
    elif [ "$1" == "composer" ]; then
        shift 1
        $COMPOSE exec cli composer "$@"
    #
    # npm
    #
    elif [ "$1" == "npm" ]; then
        shift 1
        $COMPOSE run --rm -w /var/www node npm "$@"
    #
    # encore
    #
    elif [ "$1" == "encore" ]; then
        shift 1
        $COMPOSE run --rm -w /var/www node ./node_modules/.bin/encore "$@"
    #
    # check-code
    #
    elif [ "$1" == "check-code" ]; then
        # php-cs-fixer on src/ and tests/
        $COMPOSE run --rm test php-cs-fixer fix src/ --allow-risky yes --diff --verbose --using-cache=no --rules=@Symfony,declare_strict_types,-simplified_null_return,-phpdoc_align && \
        $COMPOSE run --rm test php-cs-fixer fix tests/ --allow-risky yes --diff --verbose --using-cache=no --rules=@Symfony,declare_strict_types,-simplified_null_return,-phpdoc_align && \
        # phpmd on src/ and tests/
        $COMPOSE run --rm test phpmd src/ text cleancode, codesize, controversial, design, naming, unusedcode --suffixes php && \
        $COMPOSE run --rm test phpmd tests/ text cleancode, codesize, controversial, design, naming, unusedcode --suffixes php
    #
    # test
    #
    elif [ "$1" == "test" ]; then
        $COMPOSE run --rm test phpunit --log-junit phpunit/junit.xml
    #
    # permissions
    #
    elif [ "$1" == "permissions" ]; then
        sudo ./infrastructure/bin/fix-permissions
    #
    # mysql
    #
    elif [ "$1" == "mysql" ]; then
        shift 1
        $COMPOSE exec db mysql "$@"
    elif [ "$1" == "help" ]; then
        echo "usage: ./ops [command] [argument, ...]
init {domain} - initializes the project from scratch
up - brings containers up
stop - stops containers
down - stops and removes containers
bin/console - runs Symfony's bin/console within cli container
composer - runs composer within cli container
npm - runs npm within node container
encore - runs encore within cli container (you need to install encore and set-up your project for proper use with Symfony's webpack first)
check-code - checks your src/ and tests/ with php-cs-fixer and phpmd utilities
test - run tests with phpunit
permissions - fixes permissions in var/ folder
mysql - runs mysql within db container"
    else
        $COMPOSE "$@"
    fi
else
    $COMPOSE ps
fi
