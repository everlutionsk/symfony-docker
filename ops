#!/usr/bin/env bash

# directory where this script is located
cd $(dirname "$0")

if [ ! -f ./infrastructure/env/symfony.env ]; then
    cp ./infrastructure/env/symfony.env.dist ./infrastructure/env/symfony.env
    echo -e "\e[01;31mThe ./infrastructure/env/symfony.env file has been created. Please change it according to README.md before continuing.\e[0m"
    exit 1
fi

if [ -f "./infrastructure/env/docker.env" ]; then
    source ./infrastructure/env/docker.env
fi

# Set environment variables for compose
export APP_ENV=${SYMFONY_APP_ENV:-dev}
export APP_PORT=${SYMFONY_APP_PORT:-80}
export ES_PORT=${SYMFONY_ES_PORT:-9200}
export APP_DOMAIN=${SYMFONY_APP_DOMAIN:-dev.symfony}
export BASE_AUTH_USER=${SYMFONY_BASE_AUTH_USER:-user}
export BASE_AUTH_PASSWORD=${SYMFONY_BASE_AUTH_PASSWORD:-password}

echo -e "\e[96m ENV=$APP_ENV; DOMAIN=$APP_DOMAIN \e[0m"

if [ "$APP_ENV" == "prod" ]; then
    COMPOSE="docker-compose -p ${PWD##*/} -f infrastructure/docker-compose.yml"
else
    COMPOSE="docker-compose -p ${PWD##*/} -f infrastructure/docker-compose.yml -f infrastructure/docker-compose-dev.yml"
    export DB_PORT=${SYMFONY_DB_PORT:-3306}
fi

print_help () {
echo "Usage: $0 [command] [argument, ...]

init {domain} - initializes the project from scratch
up - brings containers up
stop - stops containers
down - stops and removes containers
bin/console - runs Symfony's bin/console within cli container
composer - runs composer within cli container
npm - runs npm within node container
encore - runs encore within cli container (you need to install encore and set-up your project for proper use with Symfony's webpack first)
check-code - checks your src/ and tests/ with php-cs-fixer and phpmd utilities
test - run tests with phpunit
permissions - fixes permissions in var/ folder
mysql - runs mysql within db container
compose - wrapper for docker-compose"
exit 1
}

if [ $# -lt 1 ]; then
    print_help
fi

case "$1" in
    init)
        shift 1
        sudo ./infrastructure/bin/init "$@"
        ;;
    up)
        $COMPOSE stop && $COMPOSE build && $COMPOSE up -d
        ;;
    stop)
        $COMPOSE stop
        ;;
    down)
        $COMPOSE down
        ;;
    bin/console)
        shift 1
        $COMPOSE exec cli bin/console "$@"
        sudo ./infrastructure/bin/fix-permissions
        ;;
    composer)
        shift 1
        $COMPOSE exec cli composer "$@"
        ;;
    npm)
        shift 1
        $COMPOSE exec node npm "$@"
        ;;
    encore)
        shift 1
        $COMPOSE exec node ./node_modules/.bin/encore "$@"
        ;;
    check-code)
        # php-cs-fixer on src/ and tests/
        $COMPOSE exec test php-cs-fixer fix src/ --allow-risky yes --diff --verbose --using-cache=no --rules=@Symfony,declare_strict_types,-simplified_null_return,-phpdoc_align && \
        $COMPOSE exec test php-cs-fixer fix tests/ --allow-risky yes --diff --verbose --using-cache=no --rules=@Symfony,declare_strict_types,-simplified_null_return,-phpdoc_align && \
        # phpmd on src/ and tests/
        $COMPOSE exec test phpmd src/ text cleancode, codesize, controversial, design, naming, unusedcode --suffixes php && \
        $COMPOSE exec test phpmd tests/ text cleancode, codesize, controversial, design, naming, unusedcode --suffixes php
        ;;
    test)
        $COMPOSE exec test phpunit --log-junit phpunit/junit.xml
        ;;
    permissions)
        sudo ./infrastructure/bin/fix-permissions
        ;;
    mysql)
        shift 1
        $COMPOSE exec db mysql "$@"
        ;;
    compose)
        shift 1
        $COMPOSE "$@"
        ;;
    *)
        print_help
esac
